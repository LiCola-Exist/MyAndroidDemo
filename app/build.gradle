apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.demo.licola.myandroiddemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true


        javaCompileOptions {
            annotationProcessorOptions {
                //配置注解解析参数
                arguments = [
                        eventBusIndex: 'com.demo.licola.myandroiddemo.EventBusIndex',//EventBus注解 生成的类全名
                        moduleName   : project.getName()
                ]
            }
        }

    }

    dexOptions {
        javaMaxHeapSize "1g"
        preDexLibraries true
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }

    testOptions{
        unitTests.includeAndroidResources true
        unitTests.returnDefaultValues true

    }
}

greendao {
    schemaVersion 1
//    generateTests true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.licola:route-annotation:1.2.1'
    implementation 'com.licola:route-api:1.2.1'
    annotationProcessor 'com.licola:route-compiler:1.2.1'

    implementation 'com.android.support:support-v4:27.1.1'

    annotationProcessor project(':compiler')
    implementation project(':annotation')
    implementation project(':aspectj')

    //log工具
    implementation "com.licola:llogger:1.4.6"

    //代码工具
    implementation 'com.licola:reversesuper-annotation:1.2.5'//注解库
    annotationProcessor 'com.licola:reversesuper-compiler:1.2.5'//代码生成工具库

    //数据模拟工具
    implementation 'com.licola:virtual:1.2.3'
//    implementation 'com.github.LiCola:VirtualData:master'

    //代码工具
    implementation 'com.licola:reversesuper-annotation:1.2.5'//注解库
    annotationProcessor 'com.licola:reversesuper-compiler:1.2.5'//代码生成工具库

    //aspectJ工具依赖
    implementation "org.aspectj:aspectjrt:$rootProject.aspectjVersion"

    //数据可视化调试工具
    implementation "com.facebook.stetho:stetho:$rootProject.stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$rootProject.stethoVersion"

    //dex分包支持
    implementation "com.android.support:multidex:$rootProject.supportMultidexVersion"

    //guava工具类
    implementation "com.google.guava:guava:$rootProject.guavaVersion"
    //View辅助工具 注解工具
    implementation "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"
    //事件总线 注解工具
    implementation "org.greenrobot:eventbus:$rootProject.eventbusVersion"
    annotationProcessor "org.greenrobot:eventbus-annotation-processor:$eventbusVersion"
    //数据库
    implementation "org.greenrobot:greendao:$rootProject.greendaoVersion"
    //OkHttp网络
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttpVersion"
    implementation "com.squareup.okhttp3:mockwebserver:$rootProject.okhttpVersion"

    //图片框架
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
    implementation "com.github.bumptech.glide:okhttp3-integration:$rootProject.glideVersion"

    //图片框架
    implementation 'com.facebook.fresco:fresco:1.9.0'

    //动画
    implementation('com.airbnb.android:lottie:2.7.0')

    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.squareup.picasso:picasso:2.71828'

    //权限适配工具
    implementation 'com.yanzhenjie:permission:2.0.0-rc4'

    implementation 'io.apptik.widget:multislider-holo:1.3'

    implementation 'com.aliyun.ams:alicloud-android-push:2.3.7'
    implementation 'com.aliyun.ams:alicloud-android-third-push:3.0.2@aar'

    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit2Version"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofit2Version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofit2Version"
    implementation "com.squareup.retrofit2:retrofit-mock:$rootProject.retrofit2Version"
    implementation "com.squareup.okio:okio:1.14.0"

    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"

    implementation('io.socket:socket.io-client:1.0.0') {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }

    //内存检测工具
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'

    //基于 mmap 的高性能通用 key-value 组件
    implementation 'com.tencent:mmkv:1.0.10'

    //support
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintVersion"
    implementation "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-vector-drawable:$rootProject.supportLibraryVersion"
    implementation "com.android.support:exifinterface:$rootProject.supportLibraryVersion"
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:gridlayout-v7:$rootProject.supportLibraryVersion"
    implementation "com.google.android:flexbox:$rootProject.flexboxVersion"


    def lifecycle_version = "1.1.1"
    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version" // use -ktx for Kotlin
    // alternatively - just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData).
    //     Support library depends on this lightweight import
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"

    def paging_version = "1.0.1"
    implementation "android.arch.paging:runtime:$paging_version"
    // alternatively - without Android dependencies for testing
    testImplementation "android.arch.paging:common:$paging_version"
    // optional - RxJava support, currently in release candidate
    implementation "android.arch.paging:rxjava2:1.0.1"

//    def nav_version = "1.0.0-alpha06"
//    implementation "android.arch.navigation:navigation-fragment:$nav_version" // use -ktx for Kotlin
//    implementation "android.arch.navigation:navigation-ui:$nav_version" // use -ktx for Kotlin
//    // optional - Test helpers
//    androidTestImplementation "android.arch.navigation:navigation-testing:$nav_version"
//    // use -ktx for Kotlin
//
//
//    def work_version = "1.0.0-alpha09"
//    implementation"android.arch.work:work-runtime:$work_version"// use -ktx for Kotlin
//    // optional - Firebase JobDispatcher support
//    implementation "android.arch.work:work-firebase:$work_version"
//    // optional - Test helpers
//    androidTestImplementation "android.arch.work:work-testing:$work_version"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "org.mockito:mockito-inline:$rootProject.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.hamcrestVersion"
    //测试依赖Json
    testImplementation 'org.json:json:20180130'
    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.runnerVersion"
    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    //Espresso UI Testing idling需要注入到release版
    implementation "com.android.support.test.espresso:espresso-idling-resource:3.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion"
    //Resolve conflicts between main and test APK:
    androidTestImplementation "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:design:$rootProject.supportLibraryVersion"

}



final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }
    variant.javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
