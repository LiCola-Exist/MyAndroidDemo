apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'org.greenrobot.greendao'

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main


android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildSdkVersion"]
    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]

        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                //配置注解解析参数
                arguments = [
                        eventBusIndex: 'com.demo.licola.myandroiddemo.EventBusIndex',//EventBus注解 生成的类全名
                        moduleName   : project.getName()
                ]
            }
        }

    }

    dexOptions {
        javaMaxHeapSize "1g"
        preDexLibraries true
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }

    testOptions {
        unitTests.includeAndroidResources true
        unitTests.returnDefaultValues true

    }
}

greendao {
    schemaVersion 1
//    generateTests true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    annotationProcessor project(':compiler')
    implementation project(':annotation')
    implementation project(':aspectj')

    implementation project(':base')
    implementation project(':module')

    implementation rootProject.ext.dependencies["route-api"]
    implementation rootProject.ext.dependencies["route-annotation"]
    annotationProcessor rootProject.ext.dependencies["route-compiler"]

    //log工具
    implementation rootProject.ext.dependencies["llogger"]

    //代码工具
    implementation rootProject.ext.dependencies["reversesuper-annotation"]
    annotationProcessor rootProject.ext.dependencies["reversesuper-compiler"]

    //数据模拟工具
    implementation rootProject.ext.dependencies["virtual"]

    //aspectJ工具依赖
    implementation "org.aspectj:aspectjrt:$rootProject.aspectjVersion"

    //数据可视化调试工具
    debugImplementation rootProject.ext.dependencies["stetho"]

    //dex分包支持
    implementation rootProject.ext.dependencies["multidex"]

    //guava工具类
//    implementation rootProject.ext.dependencies["guava-jre"]
    api rootProject.ext.dependencies["guava-android"]


    implementation(rootProject.ext.dependencies["butterknife"]) {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    //事件总线
    implementation rootProject.ext.dependencies["eventbus"]
    annotationProcessor rootProject.ext.dependencies["eventbus-annotation-processor"]

    implementation rootProject.ext.dependencies["retrofit2"]
    implementation rootProject.ext.dependencies["retrofit2-converter-gson"]

    //数据库
    implementation rootProject.ext.dependencies["greendao"]
    //OkHttp网络
    implementation rootProject.ext.dependencies["okhttp3"]
    implementation rootProject.ext.dependencies["okhttp3-interceptor-logging"]
    implementation rootProject.ext.dependencies["okhttp3-mockwebserver"]

    //retrofit2
    implementation rootProject.ext.dependencies["retrofit2"]
    implementation rootProject.ext.dependencies["retrofit2-converter-gson"]
    implementation rootProject.ext.dependencies["retrofit2-adapter-rxjava2"]
    implementation rootProject.ext.dependencies["retrofit2-mock"]

    implementation rootProject.ext.dependencies["okio"]

    //图片框架
    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    implementation rootProject.ext.dependencies["glide-okhttp3-integration"]
    implementation rootProject.ext.dependencies["glide-transformations"]

    implementation rootProject.ext.dependencies["fresco"]
    implementation rootProject.ext.dependencies["picasso"]

    //图片压缩
    implementation rootProject.ext.dependencies["luban"]
    //字体替换
    implementation rootProject.ext.dependencies["calligraphy"]

    //动画
    implementation rootProject.ext.dependencies["lottie"]


    implementation rootProject.ext.dependencies["rxjava"]
    implementation rootProject.ext.dependencies["rxandroid"]

    //权限适配工具
    implementation(rootProject.ext.dependencies["permission"]) {
        exclude group: 'com.android.support', module: 'support-fragment'
    }

    implementation 'io.apptik.widget:multislider-holo:1.3'

    implementation 'com.aliyun.ams:alicloud-android-push:2.3.7'
    implementation 'com.aliyun.ams:alicloud-android-third-push:3.0.2@aar'

    implementation rootProject.ext.dependencies["dagger"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]

    implementation('io.socket:socket.io-client:1.0.0') {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }

    //内存检测工具
    debugImplementation rootProject.ext.dependencies["stetho"]
    debugImplementation rootProject.ext.dependencies["leakcanary-debug"]
    debugImplementation rootProject.ext.dependencies["leakcanary-fragment"]
    releaseImplementation rootProject.ext.dependencies["leakcanary-release"]
    debugImplementation rootProject.ext.dependencies["blockcanary-debug"]

    debugImplementation rootProject.ext.dependencies["doraemonkit-debug"]
    releaseImplementation rootProject.ext.dependencies["doraemonkit-release"]

    //基于 mmap 的高性能通用 key-value 组件
    implementation 'com.tencent:mmkv:1.0.10'

    //support
    implementation rootProject.ext.dependencies["support-compat"]
    implementation rootProject.ext.dependencies["support-core-utils"]
    implementation rootProject.ext.dependencies["support-core-ui"]
    implementation rootProject.ext.dependencies["support-media-compat"]
    implementation rootProject.ext.dependencies["support-fragment"]
    implementation rootProject.ext.dependencies["support-annotations"]
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["recyclerview-v7"]
    implementation rootProject.ext.dependencies["cardview-v7"]
    implementation rootProject.ext.dependencies["gridlayout-v7"]

    implementation rootProject.ext.dependencies["flexbox"]
    implementation rootProject.ext.dependencies["constraint"]

    def lifecycle_version = "1.1.1"
    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version" // use -ktx for Kotlin
    // alternatively - just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData).
    //     Support library depends on this lightweight import
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"

    def paging_version = "1.0.1"
    implementation "android.arch.paging:runtime:$paging_version"
    // alternatively - without Android dependencies for testing
    testImplementation "android.arch.paging:common:$paging_version"
    // optional - RxJava support, currently in release candidate
    implementation "android.arch.paging:rxjava2:1.0.1"

//    def nav_version = "1.0.0-alpha06"
//    implementation "android.arch.navigation:navigation-fragment:$nav_version" // use -ktx for Kotlin
//    implementation "android.arch.navigation:navigation-ui:$nav_version" // use -ktx for Kotlin
//    // optional - Test helpers
//    androidTestImplementation "android.arch.navigation:navigation-testing:$nav_version"
//    // use -ktx for Kotlin
//
//
//    def work_version = "1.0.0-alpha09"
//    implementation"android.arch.work:work-runtime:$work_version"// use -ktx for Kotlin
//    // optional - Firebase JobDispatcher support
//    implementation "android.arch.work:work-firebase:$work_version"
//    // optional - Test helpers
//    androidTestImplementation "android.arch.work:work-testing:$work_version"

    testImplementation rootProject.ext.dependencies["json"]
    //idling需要注入到release版
    implementation rootProject.ext.dependencies["espresso-idling"]

    testImplementation rootProject.ext.dependencies["junit"]
    testImplementation rootProject.ext.dependencies["mockito-core"]
    testImplementation rootProject.ext.dependencies["mockito-inline"]
    testImplementation rootProject.ext.dependencies["hamcrest"]

    androidTestImplementation rootProject.ext.dependencies["mockito-android"]
    androidTestImplementation rootProject.ext.dependencies["mockito-core"]
    androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["rules"]
    androidTestImplementation rootProject.ext.dependencies["junit"]

    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    androidTestImplementation rootProject.ext.dependencies["espresso-contrib"]
    androidTestImplementation rootProject.ext.dependencies["espresso-intents"]

    //Resolve conflicts between main and test APK:
    androidTestImplementation rootProject.ext.dependencies["support-compat"]
    androidTestImplementation rootProject.ext.dependencies["support-core-utils"]
    androidTestImplementation rootProject.ext.dependencies["support-core-ui"]
    androidTestImplementation rootProject.ext.dependencies["support-media-compat"]
    androidTestImplementation rootProject.ext.dependencies["support-fragment"]
    androidTestImplementation rootProject.ext.dependencies["support-annotations"]
    androidTestImplementation rootProject.ext.dependencies["design"]
    androidTestImplementation rootProject.ext.dependencies["appcompat-v7"]
    androidTestImplementation rootProject.ext.dependencies["recyclerview-v7"]
    androidTestImplementation rootProject.ext.dependencies["cardview-v7"]
    androidTestImplementation rootProject.ext.dependencies["gridlayout-v7"]
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

}


final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }
    variant.javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
repositories {
    mavenCentral()
}
